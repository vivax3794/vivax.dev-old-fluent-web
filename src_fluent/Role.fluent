<template>
    <span id="role"> - {role}<span>
    <span $if="*current < next_role.len()" id="random">{random_chr}</span>
</template>

<setup>
let weak = self.weak();
interval(move || change_role(weak.clone()), 100);
let weak = self.weak();
interval(move || set_random_chr(weak.clone()), 50);
let weak = self.weak();
interval(move || reset(weak.clone()), 5000);
</setup>

<data>
let mut role: String = String::new();
let mut next_role: &'static str = random_role();
let mut current: usize = 0;

let mut random_chr: char = 'A';
</data>

<define>
use fluent_web_runtime::interval;
use fluent_web_runtime::internal::log;

const ALPHABET: &str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|:;,.<>?/";

fn change_role(comp: CompRef<Component>) {
   {
       unpack!(comp, role, next_role, current);
       if *current < next_role.len() {
           role.push(next_role.chars().nth(*current).unwrap());
           *current += 1;
       }
   }
   update!(comp);
}
fn set_random_chr(comp: CompRef<Component>) {
    {
        unpack!(comp, random_chr);
        *random_chr = ALPHABET.chars().nth(random_number(ALPHABET.len())).unwrap();
    }
    update!(comp);
}
fn reset(comp: CompRef<Component>) {
    {
        unpack!(comp, next_role, current, role);
        *role = String::new();
        *current = 0;
        *next_role = random_role();
    }
    update!(comp);
}

const ROLES: &[&'static str] = &[
    "Game Developer",
    "Blogger",
    "Streamer",
    "Web Developer",
    "Artist",
];

fn random_number(len: usize) -> usize {
    let x = js_sys::Math::random();
    let y = (x * len as f64).floor();
    y as usize
}
fn random_role() -> &'static str {
   &ROLES[random_number(ROLES.len())] 
}
</define>



<style>
#role {
    font-style: italic;
    color: gray;
}
#random {
    color: white;
    font-family: monospace;
}
/* #role:link { */
/*     color: #1a539e */
/* } */
/* #role:visited { */
/*     color: #7b1a9e; */
/* } */
</style>
